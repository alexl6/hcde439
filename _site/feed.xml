<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/hcde439/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/hcde439/" rel="alternate" type="text/html" /><updated>2023-01-29T02:39:57-08:00</updated><id>http://localhost:4000/hcde439/feed.xml</id><title type="html">HCDE 439 - Alex</title><subtitle>Alex&apos;s site for HCDE 439: Physical Computing projects (Winter 2023). Site generated by Jekyll.</subtitle><entry><title type="html">Assignment 3: I/O (Input/Output)!</title><link href="http://localhost:4000/hcde439/jekyll/update/2023/01/28/Assignment-3-IO.html" rel="alternate" type="text/html" title="Assignment 3: I/O (Input/Output)!" /><published>2023-01-28T17:23:00-08:00</published><updated>2023-01-28T17:23:00-08:00</updated><id>http://localhost:4000/hcde439/jekyll/update/2023/01/28/Assignment%203%20IO</id><content type="html" xml:base="http://localhost:4000/hcde439/jekyll/update/2023/01/28/Assignment-3-IO.html"><![CDATA[<h2 id="demo">Demo</h2>
<p><img src="/hcde439/assets/hw3_calib.gif" alt="Demo video showing initial sensor calibration on startup" width="75%" /></p>

<p>Demo video showing initial sensor calibration on startup. When both LEDs are on, capture the minimum reading from sensor. When both LEDs are off, capture the maximum reading from sensor. Both LEDs flashing together indicates calibration completion.</p>

<p><img src="/hcde439/assets/hw3_adjust.gif" alt="Demo video for adjusting LED brightness" width="75%" /></p>

<p>Demo showing the potentiometer controlling LED brightness in opposite directions. Turning the knob counterclockwise increases brightness for the top LED and dims the bottom LED. Turning the knob clockwise dims the top LED and increases power (brightness) for the top LED.</p>

<h2 id="circuit-drawing">Circuit drawing</h2>
<p><img src="/hcde439/assets/hw3_circuit.png" alt="Circuit drawing" width="80%" /></p>

<p>The circuit is is powered via USB connected to the Arudino microcontroller. The blue LEDs are connected to pin 3 and 9 respectively. Each LED is connected in series with a 220 Ω resistor to reduce the current through the LED.</p>

<p>The circuit also contains a potentiometer connected to pin A0. A ??? Ω resister is connected in parallel to the analog input pins to limit current through the system.</p>

<p><img src="/hcde439/assets/hw3_circuit_photo.png" alt="Circuit photo" width="80%" /></p>

<h2 id="calculating-resistor-values">Calculating resistor values</h2>
<p>Because each LED used in this assignment can operate safely with $\leq 30 \text{mA}$ of current, we need to use resisters to reduce the amount of current going through each LED.</p>

<p>Since we are connecting the resister &amp; the LED in series, the amount of current through the LED is the same as that for the resister ($I_\text{L} = I_\text{r}$). This also means that the sum of voltage drop across the resister and LED should be equal to the voltage provided by the Arduino microcontroller (5V).</p>

<p>With these information, we calculate the minimum resistance by applying Ohm’s law on the resister.
$$
\begin{align*}
  V_\text{r} &amp;= I_\text{r} R_\text{r} &amp;&amp; \text{Ohm’s law}\cr
  V_\text{PSU} - V_\text{L} &amp;= I_\text{L} R_\text{r} &amp;&amp;\text{Substitute resister V &amp; I}\cr
  5\texttt{V} - V_\text{L} &amp;= 20\texttt{mA} \cdot R_\text{r}\cr
\end{align*}
$$</p>

<p>A <strong>220 Ω</strong> resister is used for the blue LED (voltage drop = 3.3V). It needs an resistor that is at least
$$
\begin{align*}
    V&amp;=IR\cr
    5\;\texttt{V} - 3.3\;\texttt{V} &amp;=20\;\texttt{mA} \cdot \textrm{R}\cr
    \frac{1.7\;\texttt{V}}{0.02\;\texttt{A}} &amp;= \textrm{R}\cr
    \textrm{R} &amp;= 85 \;\Omega
\end{align*}
$$
Using a resistor with higher resistance than what is required here (e.g. a 100 Ω resistor) will not have an adverse effect on the longevity of the LED, it will simply cause it to appear a bit dimmer.</p>

<p>Assuming the analog in port on Arudino is an ideal voltmeter (aka. infinite resistance), the resistor between the potentiometer and ground are effectively connected in series. Because the maximum DC current through the GND pin for the microcontroller is 200 mA, we also need to calculate the minimum resistence for the previously mentioned resistor. Since the ground pin is shared between the LEDs and the potentiometer, we need to consider the worst case scenario where current through the circuit is maximized when the potentiometer’s resistance is approximately 0 Ω and both LEDs are on. We first calculate the current through the LEDs.</p>

<p>$$
\begin{align*}
  V &amp;= IR &amp;&amp;\text{Ohm’s law}\cr
  I &amp;= \frac{V}{R}\cr
  I &amp;= \frac{5\texttt{V}-3.3\texttt{V}}{220\Omega} &amp;&amp;\text{Substitution}\cr
  I &amp;\approx 7.8 mA &amp;&amp;\text{Round up for worst-case scenario}
\end{align*}
$$</p>

<p>Because each LED and the potentio meter are connected in parallel, we can then determine that</p>

<p>$$
\begin{align*}
  I_\text{max} &amp;&gt; I_\text{LED} \cdot 2 + I_\text{pot}\cr
  200 \texttt{mA} &amp;&gt; 7.8 \texttt{mA} \cdot 2 + I_\text{pot}\cr
  I_\text{pot} &amp;&lt; 184.4 \texttt{mA}
\end{align*}
$$</p>

<p>In the worst case with potentiometer having 0 Ω, the minimum resistance for the other resistor is:
$$
\begin{align*}
   V &amp;= I R &amp;&amp; \text{Ohm’s law}\cr
   5 \texttt{V} &amp;= 184.4 \texttt{mA} \cdot R &amp;&amp;\text{Substitue V &amp; I}\cr
   R &amp;= \frac{5\texttt{V}}{0.1844\texttt{A}}\cr
   R &amp;\approx 28 \;\Omega
\end{align*}
$$</p>

<p>Considering that other on-board devices might be sharing the ground pin under the hood, I decided to be extra cautious and use a <strong>330 Ω</strong>  resistor.</p>

<h2 id="arduino-code">Arduino code</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// Preprocessor macros</span>
<span class="cp">#define LED1_PIN 3  // Bottom LED
#define LED2_PIN 9  // Top LED
#define NUM_LEDS 2  // # of LEDs
</span>
<span class="cp">#define SENSOR_PIN A0 // Analog sensor port (potentiometer)
</span>

<span class="c1">// Global variables</span>
<span class="c1">// Loop variable</span>
<span class="kt">uint8_t</span> <span class="n">i</span><span class="p">;</span>
<span class="c1">// Temporarily saves sensor readings</span>
<span class="kt">long</span> <span class="n">sensor_val</span><span class="p">;</span>
<span class="c1">// Stores sensor reading for reuse</span>
<span class="kt">long</span> <span class="n">sensor_max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    <span class="c1">// Initial max sensor value</span>
<span class="kt">long</span> <span class="n">sensor_min</span> <span class="o">=</span> <span class="mi">1023</span><span class="p">;</span> <span class="c1">// Initial min sensor value</span>

<span class="c1">// Array of LEDs in the system</span>
<span class="kt">uint8_t</span> <span class="n">LEDs</span><span class="p">[</span><span class="n">NUM_LEDS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">LED1_PIN</span><span class="p">,</span> <span class="n">LED2_PIN</span><span class="p">};</span>


<span class="c1">// Helper functions</span>
<span class="c1">// Synchronize all LEDs to either ON or OFF state</span>
<span class="kt">void</span> <span class="nf">sync_led</span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span> <span class="n">L</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">num</span><span class="p">,</span> <span class="n">bool</span> <span class="n">state</span><span class="p">);</span>


<span class="c1">// Setup code, run once</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Set all used pins to output mode</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">LED1_PIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>  <span class="c1">// Set top LED to output mode</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">LED2_PIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>  <span class="c1">// Set bottom LED to output mode</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>         <span class="c1">// Set up serial connection</span>

  <span class="c1">// Calibrate min input</span>
  <span class="c1">// Light up all LEDs to indicate the system is measuring min input</span>
  <span class="n">sync_led</span><span class="p">(</span><span class="n">LEDs</span><span class="p">,</span> <span class="n">NUM_LEDS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
  <span class="c1">// Print text to terminal</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Calibrating min:</span><span class="se">\t</span><span class="s">"</span><span class="p">);</span>

  <span class="c1">// Take 10 measurements</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
    <span class="n">sensor_val</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">SENSOR_PIN</span><span class="p">);</span>  <span class="c1">// Save reading to temp variable</span>
    <span class="c1">// Update minimum if the measured value is less than the known minimum</span>
    <span class="k">if</span><span class="p">(</span><span class="n">sensor_val</span> <span class="o">&lt;</span> <span class="n">sensor_min</span><span class="p">)</span>
      <span class="n">sensor_min</span> <span class="o">=</span> <span class="n">sensor_val</span><span class="p">;</span>
    
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">sensor_min</span><span class="p">);</span> <span class="c1">// Print the obtained value</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="sc">'\t'</span><span class="p">);</span>       <span class="c1">// insert tab character for spacing</span>
    <span class="c1">// Delay to allow the user some time to generate the min sensor reading</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="c1">// Print out the finalized min sensor reading</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Finalized min:</span><span class="se">\t</span><span class="s">"</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">sensor_min</span><span class="p">);</span>

  <span class="c1">// Calibrate max input</span>
  <span class="c1">// Turn all LEDs off to indicate the system is measuring max input</span>
  <span class="n">sync_led</span><span class="p">(</span><span class="n">LEDs</span><span class="p">,</span> <span class="n">NUM_LEDS</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
  <span class="c1">// Print text to terminal</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Calibrating max:</span><span class="se">\t</span><span class="s">"</span><span class="p">);</span>

  <span class="c1">// Take 10 measurements</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
    <span class="n">sensor_val</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">SENSOR_PIN</span><span class="p">);</span>    <span class="c1">// Save reading to temp variable</span>
    <span class="c1">// Update maximum if the measured value is greater than the known maximum</span>
    <span class="k">if</span><span class="p">(</span><span class="n">sensor_val</span> <span class="o">&gt;</span> <span class="n">sensor_max</span><span class="p">)</span>
      <span class="n">sensor_max</span> <span class="o">=</span> <span class="n">sensor_val</span><span class="p">;</span>  <span class="c1">// Print the obtained value</span>
    
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">sensor_max</span><span class="p">);</span>   <span class="c1">// insert tab character for spacing</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="sc">'\t'</span><span class="p">);</span>         <span class="c1">// insert tab character for spacing</span>
    <span class="c1">// Delay to allow the user some time to generate the min sensor reading</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="c1">// Print out the finalized max sensor reading</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Finalized max:</span><span class="se">\t</span><span class="s">"</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">sensor_max</span><span class="p">);</span>

  <span class="c1">// Blink the LEDs for a few times to indicate end of calibration</span>
  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span> <span class="c1">// Loop</span>
    <span class="n">sync_led</span><span class="p">(</span><span class="n">LEDs</span><span class="p">,</span> <span class="n">NUM_LEDS</span><span class="p">,</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">);</span>  <span class="c1">// Change LED state on every iteration</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span> <span class="c1">// Delay to make the blinking noticable</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Infinite loop: Interactive code</span>
<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Read from potentiometer value</span>
  <span class="n">sensor_val</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">SENSOR_PIN</span><span class="p">);</span>

  <span class="c1">// Prints raw value from the potentiometer</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Raw sensor reading: "</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>

  <span class="c1">// Limit sensor value to prevent overflow (after mapping to LED range)</span>
  <span class="n">sensor_val</span> <span class="o">=</span> <span class="n">constrain</span><span class="p">(</span><span class="n">sensor_val</span><span class="p">,</span> <span class="n">sensor_min</span><span class="p">,</span> <span class="n">sensor_max</span><span class="p">);</span>

  <span class="c1">// Map sensor reading to bottom LED</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="n">LED1_PIN</span><span class="p">,</span> <span class="n">map</span><span class="p">(</span><span class="n">sensor_val</span><span class="p">,</span> <span class="n">sensor_min</span><span class="p">,</span> <span class="n">sensor_max</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">));</span>
  <span class="c1">// Map sensor reading to top LED (inverse)</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="n">LED2_PIN</span><span class="p">,</span> <span class="n">map</span><span class="p">(</span><span class="n">sensor_val</span><span class="p">,</span> <span class="n">sensor_min</span><span class="p">,</span> <span class="n">sensor_max</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
  
  <span class="c1">// Add some delay between reads</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>


<span class="c1">// Helper function implementation</span>
<span class="c1">// </span>
<span class="cm">/**
 * Synchronize all LEDs to either ON or OFF state
 * 
 * @param l Pointer to array of LEDs (output port)
 * @param num: number of LEDs in array l
 * @param state: either HIGH (1) or LOW (0)
*/</span>
<span class="kt">void</span> <span class="nf">sync_led</span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span> <span class="n">L</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">num</span><span class="p">,</span> <span class="n">bool</span> <span class="n">state</span><span class="p">){</span>
  <span class="c1">// Loop through the array</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">L</span><span class="p">;</span> <span class="n">ptr</span> <span class="o">&lt;</span> <span class="n">L</span> <span class="o">+</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">ptr</span><span class="p">){</span>
    <span class="c1">// Individually toggle the state of each LED</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">state</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Demo]]></summary></entry><entry><title type="html">Assignment 2: Fade!</title><link href="http://localhost:4000/hcde439/jekyll/update/2023/01/22/Assignment-2-Fade.html" rel="alternate" type="text/html" title="Assignment 2: Fade!" /><published>2023-01-22T00:21:07-08:00</published><updated>2023-01-22T00:21:07-08:00</updated><id>http://localhost:4000/hcde439/jekyll/update/2023/01/22/Assignment%202:%20Fade</id><content type="html" xml:base="http://localhost:4000/hcde439/jekyll/update/2023/01/22/Assignment-2-Fade.html"><![CDATA[<h2 id="demo">Demo</h2>
<p><img src="/hcde439/assets/hw2_demo_2.gif" alt="Demo video for adjusting LED fade color" width="75%" /></p>

<p>Demo showing bottom LED fading to different color on button press.</p>

<p><img src="/hcde439/assets/hw2_demo_1.gif" alt="Demo video for adjusting LEDs fade duration" width="75%" /></p>

<p>Demo showing top two LEDs’ fading duration changing based on duration of their respective button press duration.</p>

<h2 id="circuit-drawing">Circuit drawing</h2>
<p><img src="/hcde439/assets/hw2_circuit.png" alt="Circuit drawing" width="80%" /></p>

<p>The circuit is is powered via USB connected to the Arudino microcontroller. The blue LEDs at the top are connected to pin 6 and 5 respectively. Each primary color LED that made up the RGB LED is connected to pin 9, 10, 11 for red, green, and blue. Each LED is connected in series with a resistor to reduce the current through the LED.</p>

<p>The circuit also contains 3 push buttons connected to pin 8, 4, and 2. A 10 kΩ resister is connected in parallel to the digital input pins to prevent a short circuit and ensure consisitency when reading from those digital pins.</p>

<p><img src="/hcde439/assets/hw2_circuit_photo.jpeg" alt="Circuit photo" width="80%" /></p>

<h2 id="calculating-resistor-values">Calculating resistor values</h2>
<p>Because each LED used in this assignment can operate safely with $\leq 30 \text{mA}$ of current, we need to use resisters to reduce the amount of current going through each LED.</p>

<p>Since we are connecting the resister &amp; the LED in series, the amount of current through the LED is the same as that for the resister ($I_\text{L} = I_\text{r}$). This also means that the sum of voltage drop across the resister and LED should be equal to the voltage provided by the Arduino microcontroller (5V).</p>

<p>With these information, we calculate the minimum resistance by applying Ohm’s law on the resister.
$$
\begin{align*}
  V_\text{r} &amp;= I_\text{r} R_\text{r} &amp;&amp; \text{Ohm’s law}\cr
  V_\text{PSU} - V_\text{L} &amp;= I_\text{L} R_\text{r} &amp;&amp;\text{Substitute resister V &amp; I}\cr
  5\texttt{V} - V_\text{L} &amp;= 20\texttt{mA} \cdot R_\text{r}\cr
\end{align*}
$$</p>

<p>A <strong>220 Ω</strong> resister is used for red and green LEDs because these LEDs have a voltage drop of 1.7V. Their resisters’ resistance to be at least
$$
\begin{align*}
  V&amp;=IR\cr
  5\;\texttt{V} - 1.7\;\texttt{V} &amp;=20\;\texttt{mA} \cdot \textrm{R}\cr
  \frac{3.3\;\texttt{V}}{0.02\;\texttt{A}} &amp;= \textrm{R}\cr
  \textrm{R} &amp;= 165 \;\Omega
\end{align*}
$$</p>

<p>A <strong>220 Ω</strong> resister is used for the blue LED (voltage drop = 3.3V). It needs an resistor that is at least
$$
\begin{align*}
    V&amp;=IR\cr
    5\;\texttt{V} - 3.3\;\texttt{V} &amp;=20\;\texttt{mA} \cdot \textrm{R}\cr
    \frac{1.7\;\texttt{V}}{0.02\;\texttt{A}} &amp;= \textrm{R}\cr
    \textrm{R} &amp;= 85 \;\Omega
\end{align*}
$$
Using a resistor with higher resistance than what is required here (e.g. a 100 Ω resistor) will not have an adverse effect on the longevity of the LED, it will simply cause it to appear a bit dimmer.</p>

<h2 id="arduino-code">Arduino code</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// Preprocessor marcos</span>
<span class="c1">// Define pins for 3 buttons connected to pin 2, 4, 8</span>
<span class="cp">#define BTN1_PIN 8
#define BTN2_PIN 4
#define BTN3_PIN 2
</span>
<span class="c1">// Define pins for 2 Red LEDs connected to pin 5 &amp; 6</span>
<span class="cp">#define B1_PIN 6
#define B2_PIN 5
</span>
<span class="c1">// Define RGB LED pins</span>
<span class="cp">#define COLOR_R_PIN 9   // Red LED    -&gt; pin 9
#define COLOR_G_PIN 10  // Green LED  -&gt; pin 10  
#define COLOR_B_PIN 11  // Blue LED   -&gt; pin 11
</span>
<span class="c1">// Number of LEDs that can be controlled = 5</span>
<span class="cp">#define NUM_LEDS 5
</span><span class="c1">// Number of buttons connected = 3</span>
<span class="cp">#define NUM_BTNS 3
</span>
<span class="cp">#define ANALOG_MAX 127
#define ANALOG_MIN 0
</span>

<span class="c1">// Global Variables</span>
<span class="c1">// Represents the state of a single LED</span>
<span class="k">struct</span> <span class="n">LED</span><span class="p">{</span>
  <span class="kt">uint8_t</span> <span class="n">pin</span><span class="p">;</span>    <span class="c1">// connected pin</span>
  <span class="kt">uint8_t</span> <span class="n">brightness</span><span class="p">;</span> <span class="c1">// LED power (roughly maps to brightness)</span>
  <span class="kt">uint8_t</span> <span class="n">max_brightness</span><span class="p">;</span> <span class="c1">//Maximum allowed brightness</span>
  <span class="n">bool</span> <span class="n">increasing</span><span class="p">;</span><span class="c1">// Whether the LED is increasing in power</span>
<span class="p">};</span>

<span class="c1">// Represents the state of a single button</span>
<span class="k">struct</span> <span class="n">button</span><span class="p">{</span>
  <span class="kt">uint8_t</span> <span class="n">pin</span><span class="p">;</span>    <span class="c1">// connected pin</span>
  <span class="n">bool</span> <span class="n">pressed</span><span class="p">;</span>   <span class="c1">// whether the button was pressed in the last program cycle</span>
<span class="p">};</span>

<span class="c1">// Bookkeeping array of LED structs, the state of all LEDs</span>
<span class="k">struct</span> <span class="n">LED</span> <span class="n">LEDs</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{{</span><span class="n">B1_PIN</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nb">false</span><span class="p">},</span> <span class="p">{</span><span class="n">B2_PIN</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nb">false</span><span class="p">},</span>
                     <span class="p">{</span><span class="n">COLOR_R_PIN</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="nb">false</span><span class="p">},</span> <span class="p">{</span><span class="n">COLOR_G_PIN</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="nb">false</span><span class="p">},</span>
                     <span class="p">{</span><span class="n">COLOR_B_PIN</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="nb">false</span><span class="p">}};</span>   <span class="c1">// All LEDs are initially off</span>

<span class="c1">// Bookkeeping array of button structs. Contains state for all buttons</span>
<span class="k">struct</span> <span class="n">button</span> <span class="n">buttons</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{{</span><span class="n">BTN1_PIN</span><span class="p">,</span> <span class="nb">false</span><span class="p">},</span> <span class="p">{</span><span class="n">BTN2_PIN</span><span class="p">,</span> <span class="nb">false</span><span class="p">},</span> <span class="p">{</span><span class="n">BTN3_PIN</span><span class="p">,</span> <span class="nb">false</span><span class="p">}};</span>

<span class="c1">// Pointer used to reference each LED struct (saves copying)</span>
<span class="k">struct</span> <span class="n">LED</span><span class="o">*</span> <span class="n">led_ptr</span><span class="p">;</span>
<span class="c1">// Pointer used to reference each button struct (saves copying)</span>
<span class="k">struct</span> <span class="n">button</span><span class="o">*</span> <span class="n">btn</span><span class="p">;</span>


<span class="c1">// Helper function</span>
<span class="c1">// Declare brightness control function header</span>
<span class="kt">void</span> <span class="nf">brightness_control</span><span class="p">(</span><span class="k">struct</span> <span class="n">LED</span><span class="o">*</span> <span class="n">l</span><span class="p">,</span> <span class="k">struct</span> <span class="n">button</span><span class="o">*</span> <span class="n">b</span><span class="p">);</span>


<span class="c1">// "Main" functions</span>
<span class="c1">// Setup code (run once @ startup)</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">(){</span>  
  <span class="c1">// Loop through every button pin &amp; set to input mode</span>
  <span class="k">for</span><span class="p">(</span><span class="n">btn</span> <span class="o">=</span> <span class="n">buttons</span><span class="p">;</span> <span class="n">btn</span> <span class="o">&lt;</span> <span class="n">buttons</span> <span class="o">+</span> <span class="n">NUM_BTNS</span><span class="p">;</span> <span class="o">++</span><span class="n">btn</span><span class="p">)</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">btn</span><span class="o">-&gt;</span><span class="n">pin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>    <span class="c1">// Set a single button pin to input mode</span>
  
<span class="p">}</span>


<span class="c1">// Infinite loop (Interactive program goes here)</span>
<span class="kt">void</span> <span class="nf">loop</span><span class="p">(){</span>
  <span class="c1">// Calls brightness control helper function on blue LEDs &amp; their matching buttons</span>
  <span class="n">brightness_control</span><span class="p">(</span><span class="n">LEDs</span><span class="p">,</span> <span class="n">buttons</span><span class="p">);</span>    <span class="c1">// Top blue LED</span>
  <span class="n">brightness_control</span><span class="p">(</span><span class="n">LEDs</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">buttons</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="c1">// Bottom blue LED</span>
  
  <span class="c1">// Test if the bottom button for controlling the RGB LED is pressed</span>
  <span class="k">if</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">buttons</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">pin</span><span class="p">)){</span>  <span class="c1">// If button is pressed, only set button state to true</span>
    <span class="n">buttons</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">pressed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>  <span class="c1">// Set button as pressed</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">buttons</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">pressed</span><span class="p">){</span>  <span class="c1">// If button was just released</span>
    <span class="n">buttons</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">pressed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// Set button state to false (only take this branch once per button click)</span>
    <span class="k">for</span><span class="p">(</span><span class="n">led_ptr</span> <span class="o">=</span> <span class="n">LEDs</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span> <span class="n">led_ptr</span> <span class="o">&lt;</span> <span class="n">LEDs</span><span class="o">+</span><span class="n">NUM_LEDS</span><span class="p">;</span> <span class="o">++</span><span class="n">led_ptr</span><span class="p">){</span>  <span class="c1">// Shifts power level to all three primary color LEDs </span>
      <span class="k">if</span><span class="p">(</span><span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">increasing</span><span class="p">){</span>  <span class="c1">// If the LED is set to increasing power</span>
        <span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">brightness</span> <span class="o">+=</span> <span class="n">random</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>  <span class="c1">// Randomly increase pwoer between 3 &amp; 6</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>  <span class="c1">// otherwise decrease power</span>
        <span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">brightness</span> <span class="o">-=</span> <span class="n">random</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>  <span class="c1">// Randomly decrease power between 3 &amp; 6</span>
      <span class="p">}</span>
      <span class="c1">// Constrain power level within a set range</span>
      <span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">brightness</span> <span class="o">=</span> <span class="n">constrain</span><span class="p">(</span><span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">brightness</span><span class="p">,</span> <span class="n">ANALOG_MIN</span><span class="p">,</span> <span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">max_brightness</span><span class="p">);</span>
      <span class="c1">// 25% chance of switching between increasing/decreasing power</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">random</span><span class="p">(</span><span class="mi">4</span><span class="p">)){</span>
        <span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">increasing</span> <span class="o">=</span> <span class="o">!</span><span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">increasing</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
  <span class="p">}</span>

  <span class="c1">// Write updated brightness value to each LED</span>
  <span class="k">for</span><span class="p">(</span><span class="n">led_ptr</span> <span class="o">=</span> <span class="n">LEDs</span><span class="p">;</span> <span class="n">led_ptr</span> <span class="o">&lt;</span> <span class="n">LEDs</span> <span class="o">+</span> <span class="n">NUM_LEDS</span><span class="p">;</span> <span class="o">++</span><span class="n">led_ptr</span><span class="p">)</span>
    <span class="n">analogWrite</span><span class="p">(</span><span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">pin</span><span class="p">,</span> <span class="n">led_ptr</span><span class="o">-&gt;</span><span class="n">brightness</span><span class="p">);</span>  <span class="c1">// Write the state of single LED from bookkeeping data structure</span>
  
  <span class="n">delay</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>   <span class="c1">// Waits 250 ms</span>
<span class="p">}</span>

<span class="cm">/**
 * Control the power (~= brightness) to a given LED, optionally uses the duration of button press to
 * adjust the max brightness &amp; period of fading LED
 * 
 * @param l Pointer to LED being controlled by user
 * @param b Pointer to button used to program LED max brightness &amp; duration of each fade cycle
*/</span>
<span class="kt">void</span> <span class="nf">brightness_control</span><span class="p">(</span><span class="k">struct</span> <span class="n">LED</span><span class="o">*</span> <span class="n">l</span><span class="p">,</span> <span class="k">struct</span> <span class="n">button</span><span class="o">*</span> <span class="n">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">pin</span><span class="p">)){</span>  <span class="c1">//  Check if the button is currently pressed</span>
    <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">pressed</span><span class="p">){</span> <span class="c1">// If the button was pressed in the last program cycle</span>
      <span class="n">l</span><span class="o">-&gt;</span><span class="n">max_brightness</span><span class="o">++</span><span class="p">;</span>  <span class="c1">// Continue to increment power</span>
      <span class="n">l</span><span class="o">-&gt;</span><span class="n">max_brightness</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">max_brightness</span><span class="p">,</span> <span class="n">ANALOG_MAX</span><span class="p">);</span> <span class="c1">// Prevent int overflow</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>  <span class="c1">// Button NOT pressed in the last cycle</span>
      <span class="n">b</span><span class="o">-&gt;</span><span class="n">pressed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>    <span class="c1">// Update current button state</span>
      <span class="n">l</span><span class="o">-&gt;</span><span class="n">brightness</span> <span class="o">=</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">max_brightness</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// reset brightness to zero</span>
      <span class="n">l</span><span class="o">-&gt;</span><span class="n">increasing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>  <span class="c1">// Special value to ensure the LED brightness change direction is correct</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>  <span class="c1">// Button is not currently pressed</span>
    <span class="n">b</span><span class="o">-&gt;</span><span class="n">pressed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// Update button state</span>
  <span class="p">}</span>
  
  <span class="c1">// Change direction of shifting brightness if we hit max/min allowed brightness for the given LED</span>
  <span class="k">if</span> <span class="err">\</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">brightness</span> <span class="o">==</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">max</span><span class="err">\</span><span class="n">_brightness</span> <span class="err">\</span><span class="o">||</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">brightness</span> <span class="o">==</span> <span class="n">ANALOG</span><span class="err">\</span><span class="n">_MIN</span><span class="p">)</span>
    <span class="n">l</span><span class="o">-&gt;</span><span class="n">increasing</span> <span class="o">=</span> <span class="o">!</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">increasing</span><span class="p">;</span> <span class="c1">// Flip direction</span>
  
  <span class="c1">// Increment/decrement power (brightness) value as needed</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">increasing</span><span class="p">){</span>
    <span class="n">l</span><span class="o">-&gt;</span><span class="n">brightness</span><span class="o">++</span><span class="p">;</span>  <span class="c1">// Increasing power</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">-&gt;</span><span class="n">brightness</span><span class="o">--</span><span class="p">;</span>  <span class="c1">// Decreasing power</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Demo]]></summary></entry><entry><title type="html">Assignment 1: Blink!</title><link href="http://localhost:4000/hcde439/jekyll/update/2023/01/14/Assignment-1-Blink.html" rel="alternate" type="text/html" title="Assignment 1: Blink!" /><published>2023-01-14T22:13:07-08:00</published><updated>2023-01-14T22:13:07-08:00</updated><id>http://localhost:4000/hcde439/jekyll/update/2023/01/14/Assignment%201:%20Blink</id><content type="html" xml:base="http://localhost:4000/hcde439/jekyll/update/2023/01/14/Assignment-1-Blink.html"><![CDATA[<h2 id="demo">Demo</h2>
<p><img src="/hcde439/assets/hw1_demo.gif" alt="Demo video for 3 LEDs blinking randomly" width="75%" /></p>

<p>Demo showing 3 LEDs connected to an Arudino microcontroller blinking randomly.</p>

<h2 id="circuit-drawing">Circuit drawing</h2>
<p><img src="/hcde439/assets/hw1_circuit.png" alt="Circuit drawing" width="80%" /></p>

<p>The circuit is is powered via USB connected to the Arudino microcontroller. The red, green, and blue LEDs are connected to pin 2, 3, and 4 respectively. Each LED is connected in series with a resistor to reduce the current through the LED.</p>

<p><img src="/hcde439/assets/hw1_circuit_photo.jpeg" alt="Circuit photo" width="80%" /></p>

<h2 id="calculating-resistor-values">Calculating resistor values</h2>
<p>Because each LED used in this assignment can operate safely with $\leq 30 \text{mA}$ of current, we need to use resisters to reduce the amount of current going through each LED.</p>

<p>Since we are connecting the resister &amp; the LED in series, the amount of current through the LED is the same as that for the resister ($I_\text{L} = I_\text{r}$). This also means that the sum of voltage drop across the resister and LED should be equal to the voltage provided by the Arduino microcontroller (5V).</p>

<p>With these information, we calculate the minimum resistance by applying Ohm’s law on the resister.
$$
\begin{align*}
  V_\text{r} &amp;= I_\text{r} R_\text{r} &amp;&amp; \text{Ohm’s law}\cr
  V_\text{PSU} - V_\text{L} &amp;= I_\text{L} R_\text{r} &amp;&amp;\text{Substitute resister V &amp; I}\cr
  5\texttt{V} - V_\text{L} &amp;= 20\texttt{mA} \cdot R_\text{r}\cr
\end{align*}
$$</p>

<p>A <strong>220 Ω</strong> resister is used for red and green LEDs because these LEDs have a voltage drop of 1.7V. Their resisters’ resistance to be at least
$$
\begin{align*}
  V&amp;=IR\cr
  5\;\texttt{V} - 1.7\;\texttt{V} &amp;=20\;\texttt{mA} \cdot \textrm{R}\cr
  \frac{3.3\;\texttt{V}}{0.02\;\texttt{A}} &amp;= \textrm{R}\cr
  \textrm{R} &amp;= 165 \;\Omega
\end{align*}
$$</p>

<p>A <strong>100 Ω</strong> resister is used for the blue LED (voltage drop = 3.3V). It needs an resistor that is at least
$$
\begin{align*}
    V&amp;=IR\cr
    5\;\texttt{V} - 3.3\;\texttt{V} &amp;=20\;\texttt{mA} \cdot \textrm{R}\cr
    \frac{1.7\;\texttt{V}}{0.02\;\texttt{A}} &amp;= \textrm{R}\cr
    \textrm{R} &amp;= 85 \;\Omega
\end{align*}
$$</p>

<h2 id="arduino-code">Arduino code</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// Preprocessor macros for LED -&gt; pin mapping &amp; No. of LEDs</span>
<span class="cp">#define RED_PIN 2
#define GREEN_PIN 3
#define BLUE_PIN 4
#define NUM_LEDS 3
</span>
<span class="c1">// Array of LEDs by their pin</span>
<span class="kt">int</span> <span class="n">led_pins</span><span class="p">[</span><span class="n">NUM_LEDS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">RED_PIN</span><span class="p">,</span> <span class="n">GREEN_PIN</span><span class="p">,</span> <span class="n">BLUE_PIN</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>  <span class="c1">// Loop variable</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Set all used pins to output mode</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM_LEDS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// Loop through every LED</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">led_pins</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">OUTPUT</span><span class="p">);</span> <span class="c1">// set a single pin to output</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Modify the state of every connected LED (might remain the same)</span>
  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM_LEDS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// Loop through every LED</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led_pins</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">random</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// Randomly decide if this LED is on or off</span>
  <span class="p">}</span>
  <span class="n">delay</span><span class="p">(</span><span class="n">random</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">1500</span><span class="p">));</span> <span class="c1">// Random delay between 500 and 1500 ms</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Demo]]></summary></entry></feed>